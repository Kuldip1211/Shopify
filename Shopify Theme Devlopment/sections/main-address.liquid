
{%- style -%}
  /* üåø ShivGardning Address Management Page */
  .customer.addresses {
    font-family: 'Poppins', sans-serif;
    background: linear-gradient(135deg, #f3fff7, #e6f4ea);
    border-radius: 16px;
    max-width: 1100px;
    margin: 60px auto;
    padding: 40px 25px;
    box-shadow: 0 4px 25px rgba(0, 0, 0, 0.05);
  }

  .customer.addresses h1 {
    text-align: center;
    color: #26734d;
    font-size: 30px;
    font-weight: 700;
    margin-bottom: 25px;
  }

  .customer.addresses a {
    color: #3ca374;
    text-decoration: none;
    font-weight: 500;
  }

  .customer.addresses a:hover {
    text-decoration: underline;
  }

  .address-actions {
    text-align: center;
    margin-bottom: 25px;
  }

  .add-address-btn {
    display: inline-block;
    margin: 10px;
    padding: 12px 25px;
    background: #3ca374;
    color: #fff;
    border: none;
    border-radius: 8px;
    font-weight: 600;
    transition: background 0.3s, transform 0.2s;
    cursor: pointer;
  }

  .add-address-btn:hover {
    background: #2f8c5e;
    transform: translateY(-2px);
  }

  /* üì¶ Address Card Layout */
  .address-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 25px;
    margin-top: 30px;
  }

  .address-card {
    background: #fff;
    border-radius: 14px;
    padding: 25px;
    box-shadow: 0 5px 15px rgba(60, 163, 116, 0.1);
    border: 1px solid #d9f3e0;
    transition: transform 0.25s ease, box-shadow 0.25s ease;
  }

  .address-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 20px rgba(60, 163, 116, 0.15);
  }

  .address-card h2 {
    color: #26734d;
    font-size: 18px;
    margin-bottom: 10px;
    font-weight: 600;
  }

  .address-card p {
    color: #3c4a40;
    font-size: 15px;
    line-height: 1.6;
    margin-bottom: 15px;
  }

  .address-card button {
    margin: 5px;
    padding: 10px 18px;
    border: none;
    border-radius: 6px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .address-card .edit-btn {
    background: #3ca374;
    color: white;
  }

  .address-card .edit-btn:hover {
    background: #338a62;
  }

  .address-card .delete-btn {
    background: #e74c3c;
    color: #fff;
  }

  .address-card .delete-btn:hover {
    background: #c0392b;
  }

  .no-addresses {
    text-align: center;
    color: #3c4a40;
    font-size: 16px;
    margin-top: 20px;
  }

  /* üßæ Form Styling */
  .address-form {
    background: #ffffff;
    border: 1px solid #d9f3e0;
    border-radius: 12px;
    padding: 25px;
    margin-top: 25px;
    box-shadow: 0 4px 15px rgba(60, 163, 116, 0.1);
    display: none;
  }

  .address-form input {
    width: 100%;
    padding: 10px;
    border: 1px solid #bde2c7;
    border-radius: 8px;
    margin: 8px 0;
    font-size: 14px;
  }

  .address-form label {
    font-weight: 500;
    color: #26734d;
    display: block;
    margin-top: 5px;
  }

  .address-form .form-btns {
    text-align: center;
    margin-top: 15px;
  }

  .address-form .form-btns button {
    margin: 0 10px;
  }
{%- endstyle -%}

{%- paginate customer.addresses by 6 -%}
  <div class="customer addresses section-{{ section.id }}-padding" data-customer-addresses>
    <h1>Manage Your Addresses üåø</h1>
    <div class="address-actions">
      <a href="{{ routes.account_url }}">‚Üê Back to Account</a><br>
      <button type="button" class="add-address-btn" id="toggleAddForm">‚ûï Add New Address</button>
    </div>

    <!-- Add New Address Form -->
    <div id="AddAddressForm" class="address-form">
      <h2 style="text-align:center; color:#26734d;">Add New Address</h2>
      {%- form 'customer_address', customer.new_address -%}
        <input type="text" name="address[first_name]" placeholder="First Name" required>
        <input type="text" name="address[last_name]" placeholder="Last Name" required>
        <input type="text" name="address[address1]" placeholder="Address" required>
        <input type="text" name="address[city]" placeholder="City" required>
        <input type="text" name="address[zip]" placeholder="Postal Code" required>
        <input type="tel" name="address[phone]" placeholder="Phone">
        <div>
          {{ form.set_as_default_checkbox }}
          <label for="address_default_address_new">Set as default</label>
        </div>
        <div class="form-btns">
          <button type="submit" class="add-address-btn">Save</button>
          <button type="button" class="add-address-btn" style="background:#ccc; color:#000;" id="cancelAddForm">Cancel</button>
        </div>
      {%- endform -%}
    </div>

    <!-- Address List -->
    <div class="address-grid">
      {%- for address in customer.addresses -%}
        <div class="address-card">
          <h2>{% if address == customer.default_address %}üè† Default Address{% else %}Address {{ forloop.index }}{% endif %}</h2>
          <p>{{ address | format_address }}</p>
          <div>
            <button class="edit-btn" data-edit-id="{{ address.id }}">Edit</button>
            <button class="delete-btn" data-delete-url="{{ address.url }}">Delete</button>
          </div>

          <!-- Edit Form -->
          <div id="editForm_{{ address.id }}" class="address-form">
            {%- form 'customer_address', address -%}
              <input type="text" name="address[first_name]" value="{{ form.first_name }}" placeholder="First Name" required>
              <input type="text" name="address[last_name]" value="{{ form.last_name }}" placeholder="Last Name" required>
              <input type="text" name="address[address1]" value="{{ form.address1 }}" placeholder="Address" required>
              <input type="text" name="address[city]" value="{{ form.city }}" placeholder="City" required>
              <input type="text" name="address[zip]" value="{{ form.zip }}" placeholder="Postal Code" required>
              <input type="tel" name="address[phone]" value="{{ form.phone }}" placeholder="Phone">
              <div>
                {{ form.set_as_default_checkbox }}
                <label>Set as default</label>
              </div>
              <div class="form-btns">
                <button type="submit" class="add-address-btn">Update</button>
                <button type="button" class="add-address-btn cancel-edit" style="background:#ccc; color:#000;">Cancel</button>
              </div>
            {%- endform -%}
          </div>
        </div>
      {%- else -%}
        <p class="no-addresses">No address found üå∏</p>
      {%- endfor -%}
    </div>
  </div>
{%- endpaginate -%}

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // üåø Add New Address Toggle
    const toggleBtn = document.getElementById("toggleAddForm");
    const addForm = document.getElementById("AddAddressForm");
    const cancelAdd = document.getElementById("cancelAddForm");

    if (toggleBtn && addForm) {
      toggleBtn.addEventListener("click", () => {
        addForm.style.display = addForm.style.display === "block" ? "none" : "block";
        toggleBtn.textContent = addForm.style.display === "block" ? "‚úñ Close Form" : "‚ûï Add New Address";
      });
    }

    if (cancelAdd) {
      cancelAdd.addEventListener("click", () => {
        addForm.style.display = "none";
        toggleBtn.textContent = "‚ûï Add New Address";
      });
    }

    // ‚úèÔ∏è Edit Form Toggle
    document.querySelectorAll(".edit-btn").forEach((btn) => {
      btn.addEventListener("click", () => {
        const id = btn.dataset.editId;
        const form = document.getElementById(`editForm_${id}`);
        if (form) form.style.display = form.style.display === "block" ? "none" : "block";
      });
    });

    // ‚ùå Cancel Edit
    document.querySelectorAll(".cancel-edit").forEach((btn) => {
      btn.addEventListener("click", (e) => {
        e.target.closest(".address-form").style.display = "none";
      });
    });

    // üóëÔ∏è Delete Confirmation
    document.querySelectorAll(".delete-btn").forEach((btn) => {
      btn.addEventListener("click", () => {
        if (confirm("Are you sure you want to delete this address?")) {
          fetch(btn.dataset.deleteUrl, { method: "DELETE" }).then(() => location.reload());
        }
      });
    });
  });
</script>

{% schema %}
{
  "name": "Main Addresses",
  "settings": [
    {
      "type": "header",
      "content": "Address Page Padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Top",
      "default": 40
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding Bottom",
      "default": 40
    }
  ]
}
{% endschema %}
